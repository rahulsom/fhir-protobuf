import fhir.protobuf.bld.FhirJsonToProto

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'com.google.protobuf' version '0.8.3'
    id "com.jfrog.bintray" version "1.8.0"
    id "nebula.release" version "6.1.0"
    id "io.codearte.nexus-staging" version "0.11.0"
}

apply from: 'gradle/publishing.gradle'

group = 'com.github.rahulsom'

repositories {
    jcenter()
}

sourceSets {
    main {
        proto.srcDir 'build/proto'
        java.srcDir "$buildDir/generated/source/proto/main/java"
        resources.srcDir "$buildDir/proto"
    }
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'com.google.protobuf:protobuf-java:3.5.0'

    testCompile 'junit:junit:4.12'
    testCompile 'com.google.protobuf:protobuf-java-util:3.5.0'
}

task createProto() {
    inputs.files("src/main/schemas/fhir.schema.json")
    outputs.files("$buildDir/proto/fhir.proto")
    doLast {
        if (!buildDir.exists()) {
            buildDir.mkdirs()
        }
        def protoDir = new File("$buildDir/proto")
        if (!protoDir.exists()) {
            protoDir.mkdirs()
        }
        def inputFile = new File("src/main/schemas/fhir.schema.json")
        new FhirJsonToProto(inputFile, new File(protoDir, "fhir.proto")).convert()
    }
}

compileJava.dependsOn 'createProto', 'generateProto'

nexusStaging {
    delayBetweenRetriesInMillis = 10000
    numberOfRetries = 30
}

tasks.release.dependsOn "uploadArchives"

// tasks.release.dependsOn 'grooves-docs:publishGhPages'

project.afterEvaluate {
    project.tasks.findByName('closeRepository').mustRunAfter "uploadArchives"

    if (!version.toString().endsWith('-SNAPSHOT')) {
        tasks.release.dependsOn 'closeAndPromoteRepository'// , 'srcclr'
    }
}
